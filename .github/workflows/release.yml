name: Release

on:
  # Trigger on pushes to main branch (after PR merge)
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  # Wait for all CI workflows to complete successfully
  wait-for-ci:
    name: Wait for CI Workflows
    runs-on: ubuntu-latest
    steps:
      - name: Wait for CI workflows to complete successfully
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          check-regexp: '^(JavaScript CI|Python CI|Integration Tests)$'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
          running-workflow-name: 'Wait for CI Workflows'
          allowed-conclusions: success

  # Check if version changed and create tag
  check-and-tag:
    name: Check Version and Create Tag
    runs-on: ubuntu-latest
    needs: wait-for-ci
    outputs:
      new-tag: ${{ steps.tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get package.json version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: tag-exists
        run: |
          if git tag -l | grep -q "^${{ steps.package-version.outputs.version }}$"; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create tag
        id: tag
        if: steps.tag-exists.outputs.exists == 'false'
        uses: anothrNick/github-tag-action@1.73.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CUSTOM_TAG: ${{ steps.package-version.outputs.version }}
          RELEASE_BRANCHES: main

  build-javascript:
    name: Build JavaScript Client
    runs-on: ubuntu-latest
    if: needs.check-and-tag.outputs.new-tag != ''
    needs: check-and-tag

    steps:
      - uses: actions/checkout@v4

      - name: Check for .nvmrc file
        id: check-nvmrc
        run: |
          if [ -f .nvmrc ]; then
            echo "nvmrc_exists=true" >> $GITHUB_OUTPUT
          else
            echo "nvmrc_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Build JavaScript bundles
        run: npm run build:prod

      - name: Upload JavaScript artifacts
        uses: actions/upload-artifact@v4
        with:
          name: javascript-dist
          path: javascript/dist/
          retention-days: 1

  build-python:
    name: Build Python Client
    runs-on: ubuntu-latest
    if: needs.check-and-tag.outputs.new-tag != ''
    needs: check-and-tag

    steps:
      - uses: actions/checkout@v4

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync

      - name: Build Python wheel
        run: uv build

      - name: Upload Python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-dist
          path: dist/
          retention-days: 1

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-and-tag, build-javascript, build-python]

    steps:
      - uses: actions/checkout@v4

      - name: Download JavaScript artifacts
        uses: actions/download-artifact@v4
        with:
          name: javascript-dist
          path: javascript-dist/

      - name: Download Python artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-dist
          path: python-dist/

      - name: Determine tag
        id: tag
        run: |
          echo "tag=${{ needs.check-and-tag.outputs.new-tag }}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            javascript-dist/*
            python-dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
