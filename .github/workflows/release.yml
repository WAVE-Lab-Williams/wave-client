name: Release

on:
  # Trigger on pushes to main branch (after PR merge)
  push:
    branches:
      - main

permissions:
  contents: write
  id-token: write

jobs:
  # Check if version changed and create tag
  check-and-tag:
    name: Check Version and Create Tag
    runs-on: ubuntu-latest
    outputs:
      new-tag: ${{ steps.tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get package.json version
        id: package-version
        run: |
          echo "📦 Reading version from package.json..."
          VERSION=$(node -p "require('./package.json').version")
          echo "✅ Found version: $VERSION"
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: tag-exists
        run: |
          echo "🔍 Checking if tag ${{ steps.package-version.outputs.version }} already exists..."
          if git tag -l | grep -q "^${{ steps.package-version.outputs.version }}$"; then
            echo "⚠️ Tag ${{ steps.package-version.outputs.version }} already exists - skipping release"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Tag ${{ steps.package-version.outputs.version }} does not exist - proceeding with release"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create tag
        id: tag
        if: steps.tag-exists.outputs.exists == 'false'
        run: echo "🏷️ Creating git tag ${{ steps.package-version.outputs.version }}..."

      - name: Push tag to repository
        if: steps.tag-exists.outputs.exists == 'false'
        uses: anothrNick/github-tag-action@1.73.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CUSTOM_TAG: ${{ steps.package-version.outputs.version }}
          RELEASE_BRANCHES: main

  build-javascript:
    name: Build JavaScript Client
    runs-on: ubuntu-latest
    if: needs.check-and-tag.outputs.new-tag != ''
    needs: check-and-tag

    steps:
      - uses: actions/checkout@v4

      - name: Check for .nvmrc file
        id: check-nvmrc
        run: |
          if [ -f .nvmrc ]; then
            echo "nvmrc_exists=true" >> $GITHUB_OUTPUT
          else
            echo "nvmrc_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Install dependencies
        run: |
          echo "📦 Installing JavaScript dependencies..."
          npm ci
          echo "✅ Dependencies installed successfully"

      - name: Build JavaScript bundles
        run: |
          echo "🔨 Building JavaScript bundles..."
          npm run build:prod
          echo "✅ JavaScript build completed"
          echo "📁 Built files:"
          ls -la javascript/dist/

      - name: Upload JavaScript artifacts
        uses: actions/upload-artifact@v4
        with:
          name: javascript-dist
          path: javascript/dist/
          retention-days: 1

      - name: Confirm JavaScript upload
        run: echo "📤 JavaScript artifacts uploaded successfully"

  build-python:
    name: Build Python Client
    runs-on: ubuntu-latest
    if: needs.check-and-tag.outputs.new-tag != ''
    needs: check-and-tag

    steps:
      - uses: actions/checkout@v4

      - name: Install UV
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Set up Python
        run: |
          echo "🐍 Setting up Python 3.12..."
          uv python install 3.12
          echo "✅ Python setup completed"

      - name: Install dependencies
        run: |
          echo "📦 Installing Python dependencies..."
          uv sync
          echo "✅ Dependencies installed successfully"

      - name: Build Python wheel
        run: |
          echo "🔨 Building Python wheel..."
          uv build
          echo "✅ Python build completed"
          echo "📁 Built files:"
          ls -la dist/

      - name: Upload Python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-dist
          path: dist/
          retention-days: 1

      - name: Confirm Python upload
        run: echo "📤 Python artifacts uploaded successfully"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-and-tag, build-javascript, build-python]

    steps:
      - uses: actions/checkout@v4

      - name: Download JavaScript artifacts
        uses: actions/download-artifact@v4
        with:
          name: javascript-dist
          path: javascript/dist/

      - name: Download Python artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-dist
          path: python-dist/

      - name: Verify downloaded artifacts
        run: |
          echo "📁 Verifying downloaded artifacts..."
          echo "JavaScript files:"
          ls -la javascript/dist/
          echo "Python files:"
          ls -la python-dist/

      - name: Determine tag
        id: tag
        run: |
          TAG="${{ needs.check-and-tag.outputs.new-tag }}"
          echo "🏷️ Using tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Commit built files to repository
        run: |
          echo "📝 Committing built files for CDN access..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Force add dist files (even though they're gitignored)
          git add -f javascript/dist/

          # Only commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "chore: add built files for release ${{ steps.tag.outputs.tag }}"
            
            # Update the existing tag to include built files
            git tag -f ${{ steps.tag.outputs.tag }}
            git push origin ${{ steps.tag.outputs.tag }} --force
          else
            echo "ℹ️ No changes to commit"
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            javascript/dist/*
            python-dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release created successfully
        run: |
          echo "🎉 Release ${{ steps.tag.outputs.tag }} created successfully!"
          echo "📦 Release includes JavaScript and Python distribution files"
          echo "🔗 View release at: https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.tag }}"
