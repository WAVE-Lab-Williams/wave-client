{"version":3,"file":"wave-client.min.js","sources":["../src/core/errors.js","../src/wave-client.js"],"sourcesContent":["/**\n * Error classes for the WAVE JavaScript client\n */\n\nexport class WaveClientError extends Error {\n    constructor(message, statusCode = null, detail = null, retryAfter = undefined) {\n        super(message);\n        this.name = 'WaveClientError';\n        this.statusCode = statusCode;\n        this.detail = detail;\n        if (retryAfter !== undefined) {\n            this.retryAfter = retryAfter; // milliseconds to wait before retry\n        }\n    }\n}\n\nexport class ValidationError extends WaveClientError {\n    constructor(message, detail) {\n        super(message, 400, detail);\n        this.name = 'ValidationError';\n    }\n}\n\nexport class AuthenticationError extends WaveClientError {\n    constructor(message, detail) {\n        super(message, 401, detail);\n        this.name = 'AuthenticationError';\n    }\n}\n\nexport class AuthorizationError extends WaveClientError {\n    constructor(message, detail) {\n        super(message, 403, detail);\n        this.name = 'AuthorizationError';\n    }\n}\n\nexport class NotFoundError extends WaveClientError {\n    constructor(message, detail) {\n        super(message, 404, detail);\n        this.name = 'NotFoundError';\n    }\n}\n\nexport class RateLimitError extends WaveClientError {\n    constructor(message, detail, retryAfter) {\n        super(message, 429, detail, retryAfter);\n        this.name = 'RateLimitError';\n    }\n}\n\nexport class ServerError extends WaveClientError {\n    constructor(message, statusCode, detail) {\n        super(message, statusCode, detail);\n        this.name = 'ServerError';\n    }\n}\n\n/**\n * Create appropriate error from HTTP response\n * @param {Response} response - Fetch API response\n * @param {Object} errorData - Parsed error response body\n * @returns {WaveClientError} Appropriate error instance\n */\nexport function createErrorFromResponse(response, errorData) {\n    const { status } = response;\n    const message = errorData?.detail || response.statusText || 'Unknown error';\n    const detail = errorData?.detail;\n\n    switch (status) {\n        case 400:\n            return new ValidationError(message, detail);\n        case 401:\n            return new AuthenticationError(message, detail);\n        case 403:\n            return new AuthorizationError(message, detail);\n        case 404:\n            return new NotFoundError(message, detail);\n        case 429: {\n            const retryAfter = parseRetryAfter(response.headers.get('Retry-After'));\n            return new RateLimitError(message, detail, retryAfter);\n        }\n        case 500:\n        case 502:\n        case 503:\n        case 504:\n            return new ServerError(message, status, detail);\n        default:\n            return new WaveClientError(message, status, detail);\n    }\n}\n\n/**\n * Parse Retry-After header value to milliseconds\n * @param {string|null} retryAfterHeader - Retry-After header value\n * @returns {number} Retry delay in milliseconds\n */\nfunction parseRetryAfter(retryAfterHeader) {\n    if (!retryAfterHeader) {\n        return undefined; // Return undefined when no header is provided\n    }\n\n    // Handle both seconds (number) and HTTP date formats\n    const seconds = parseInt(retryAfterHeader, 10);\n    if (!isNaN(seconds)) {\n        return seconds * 1000; // Convert to milliseconds\n    }\n\n    // Handle HTTP date format (less common for rate limiting)\n    const date = new Date(retryAfterHeader);\n    if (!isNaN(date.getTime())) {\n        return Math.max(0, date.getTime() - Date.now());\n    }\n\n    return 5000; // Default fallback for invalid headers\n}\n","/**\n * WAVE JavaScript Client\n *\n * Simple client for logging experiment data to the WAVE Backend API.\n * Focused on experiment data collection with robust error handling and retry logic.\n *\n * **Authentication**: Uses URL parameter-based API key extraction for browser security.\n * Add your API key to the URL: `?key=exp_abc123` or provide manually in constructor.\n *\n * **Security Benefits**:\n * - No API keys exposed in JavaScript source code or bundles\n * - Each experiment session gets unique temporary key via URL\n * - Prevents accidental exposure in version control\n *\n * @example\n * // URL-based authentication (recommended)\n * // URL: https://experiment-site.com/task.html?key=exp_abc123&participant=P001\n * const client = new WaveClient();\n *\n * @example\n * // Manual API key (for testing or special cases)\n * const client = new WaveClient({ apiKey: \"exp_abc123\" });\n */\n\nimport {\n    WaveClientError,\n    ValidationError,\n    AuthenticationError,\n    AuthorizationError,\n    NotFoundError,\n    RateLimitError,\n    ServerError,\n    createErrorFromResponse,\n} from './core/errors.js';\n\nexport default class WaveClient {\n    /**\n     * Create a WAVE client instance\n     * @param {Object} options - Configuration options\n     * @param {string} [options.apiKey] - API key (overrides URL parameter extraction)\n     * @param {string} [options.baseUrl='http://localhost:8000'] - Base URL for API\n     * @param {number} [options.timeout=30000] - Request timeout in milliseconds (generous for experiments)\n     * @param {number} [options.retries=5] - Maximum number of retries (prevent data loss)\n     * @param {number} [options.baseDelay=1000] - Base delay for exponential backoff (ms)\n     * @param {number} [options.maxDelay=30000] - Maximum delay between retries (ms)\n     *\n     * @example\n     * // Automatic URL parameter extraction (recommended for browser experiments)\n     * // URL: https://experiment-site.com/task.html?key=exp_abc123\n     * const client = new WaveClient();\n     *\n     * @example\n     * // Manual API key (overrides URL parameter)\n     * const client = new WaveClient({\n     *   apiKey: \"exp_abc123\",\n     *   baseUrl: \"https://api.example.com\"\n     * });\n     */\n    constructor(options = {}) {\n        // Configuration\n        this.apiKey = options.apiKey || this._getApiKeyFromUrl();\n        this.baseUrl =\n            options.baseUrl || this._getEnvVar('WAVE_API_URL') || 'http://localhost:8000';\n        this.timeout = options.timeout || 30000;\n        this.maxRetries = options.retries || 5;\n        this.baseDelay = options.baseDelay || 1000;\n        this.maxDelay = options.maxDelay || 30000;\n\n        // Client version for compatibility checking\n        this.clientVersion = '1.0.0';\n\n        // Validate API key is present\n        if (!this.apiKey) {\n            throw new AuthenticationError(\n                'API key is required. Provide apiKey option or include \"key\" parameter in URL.'\n            );\n        }\n\n        // Ensure baseUrl doesn't end with slash\n        this.baseUrl = this.baseUrl.replace(/\\/$/, '');\n    }\n\n    /**\n     * Primary method: Log experiment data\n     * @param {string} experimentId - Experiment UUID\n     * @param {string} participantId - Participant identifier\n     * @param {Object} data - Experiment data matching the experiment type schema\n     * @returns {Promise<Object>} Created data row with all fields\n     */\n    async logExperimentData(experimentId, participantId, data) {\n        if (!experimentId) {\n            throw new ValidationError('experimentId is required');\n        }\n        if (!participantId) {\n            throw new ValidationError('participantId is required');\n        }\n        if (!data || typeof data !== 'object' || Array.isArray(data)) {\n            throw new ValidationError('data must be a non-empty object');\n        }\n\n        const requestBody = {\n            participant_id: participantId,\n            data: data,\n        };\n\n        const url = `/api/v1/experiment-data/${experimentId}/data/`;\n        return await this._makeRequest('POST', url, requestBody);\n    }\n\n    /**\n     * Get API health status\n     * @returns {Promise<Object>} Health status\n     */\n    async getHealth() {\n        return await this._makeRequest('GET', '/health');\n    }\n\n    /**\n     * Get API version and compatibility information\n     * @returns {Promise<Object>} Version information\n     */\n    async getVersion() {\n        return await this._makeRequest('GET', '/version');\n    }\n\n    /**\n     * Update base URL\n     * @param {string} baseUrl - New base URL\n     */\n    setBaseUrl(baseUrl) {\n        if (!baseUrl) {\n            throw new ValidationError('Base URL cannot be empty');\n        }\n        this.baseUrl = baseUrl.replace(/\\/$/, '');\n    }\n\n    /**\n     * Make HTTP request with retry logic\n     * @private\n     * @param {string} method - HTTP method\n     * @param {string} url - URL path (relative to baseUrl)\n     * @param {Object} [body] - Request body for POST/PUT requests\n     * @param {number} [attempt=1] - Current attempt number\n     * @returns {Promise<Object>} Response data\n     */\n    async _makeRequest(method, url, body = null, attempt = 1) {\n        const fullUrl = `${this.baseUrl}${url}`;\n\n        const headers = {\n            Authorization: `Bearer ${this.apiKey}`,\n            'X-WAVE-Client-Version': this.clientVersion,\n            'Content-Type': 'application/json',\n        };\n\n        const requestOptions = {\n            method,\n            headers,\n        };\n\n        // Add timeout support (AbortSignal.timeout is not available in older environments)\n        if (typeof AbortSignal !== 'undefined' && AbortSignal.timeout) {\n            requestOptions.signal = AbortSignal.timeout(this.timeout);\n        } else if (typeof AbortController !== 'undefined') {\n            // Fallback for older environments\n            const controller = new AbortController();\n            requestOptions.signal = controller.signal;\n            setTimeout(() => controller.abort(), this.timeout);\n        }\n\n        if (body && (method === 'POST' || method === 'PUT')) {\n            requestOptions.body = JSON.stringify(body);\n        }\n\n        try {\n            const response = await fetch(fullUrl, requestOptions);\n\n            if (!response.ok) {\n                // Parse error response\n                let errorData;\n                try {\n                    errorData = await response.json();\n                } catch {\n                    errorData = { detail: response.statusText };\n                }\n\n                const error = createErrorFromResponse(response, errorData);\n\n                // Retry logic for retryable errors\n                if (this._shouldRetry(error, attempt)) {\n                    const delay = this._calculateDelay(attempt, error.retryAfter);\n                    console.warn(\n                        `Request failed (${error.name}), retrying in ${delay}ms (attempt ${attempt}/${this.maxRetries})`\n                    );\n\n                    await this._sleep(delay);\n                    return await this._makeRequest(method, url, body, attempt + 1);\n                }\n\n                throw error;\n            }\n\n            // Parse successful response\n            const responseData = await response.json();\n            return responseData;\n        } catch (error) {\n            // Handle network errors and timeouts\n            if (error.name === 'AbortError') {\n                const timeoutError = new WaveClientError(`Request timeout after ${this.timeout}ms`);\n\n                if (this._shouldRetry(timeoutError, attempt)) {\n                    const delay = this._calculateDelay(attempt);\n                    console.warn(\n                        `Request timeout, retrying in ${delay}ms (attempt ${attempt}/${this.maxRetries})`\n                    );\n\n                    await this._sleep(delay);\n                    return await this._makeRequest(method, url, body, attempt + 1);\n                }\n\n                throw timeoutError;\n            }\n\n            // Re-throw WAVE client errors\n            if (error instanceof WaveClientError) {\n                throw error;\n            }\n\n            // Handle other network errors\n            const networkError = new WaveClientError(`Network error: ${error.message}`);\n\n            if (this._shouldRetry(networkError, attempt)) {\n                const delay = this._calculateDelay(attempt);\n                console.warn(\n                    `Network error, retrying in ${delay}ms (attempt ${attempt}/${this.maxRetries})`\n                );\n\n                await this._sleep(delay);\n                return await this._makeRequest(method, url, body, attempt + 1);\n            }\n\n            throw networkError;\n        }\n    }\n\n    /**\n     * Determine if request should be retried\n     * @private\n     * @param {Error} error - Error that occurred\n     * @param {number} attempt - Current attempt number\n     * @returns {boolean} Whether to retry\n     */\n    _shouldRetry(error, attempt) {\n        if (attempt > this.maxRetries) {\n            return false;\n        }\n\n        // Don't retry client errors (4xx except rate limiting)\n        if (\n            error instanceof ValidationError ||\n            error instanceof AuthenticationError ||\n            error instanceof AuthorizationError ||\n            error instanceof NotFoundError\n        ) {\n            return false;\n        }\n\n        // Retry rate limits and server errors\n        if (\n            error instanceof RateLimitError ||\n            error instanceof ServerError ||\n            error.name === 'AbortError' ||\n            error instanceof WaveClientError\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Calculate delay for exponential backoff with jitter\n     * @private\n     * @param {number} attempt - Current attempt number\n     * @param {number} [retryAfter] - Server-specified retry delay (ms)\n     * @returns {number} Delay in milliseconds\n     */\n    _calculateDelay(attempt, retryAfter = null) {\n        if (retryAfter) {\n            // Honor server-specified delay for rate limiting\n            return Math.min(retryAfter, this.maxDelay);\n        }\n\n        // Exponential backoff with jitter\n        const exponentialDelay = this.baseDelay * Math.pow(2, attempt - 1);\n        const jitter = Math.random() * 1000; // Add randomness to avoid thundering herd\n\n        return Math.min(exponentialDelay + jitter, this.maxDelay);\n    }\n\n    /**\n     * Sleep for specified duration\n     * @private\n     * @param {number} ms - Milliseconds to sleep\n     * @returns {Promise<void>}\n     */\n    _sleep(ms) {\n        return new Promise((resolve) => setTimeout(resolve, ms));\n    }\n\n    /**\n     * Extract API key from URL parameters (browser-based authentication)\n     * @private\n     * @returns {string|null} API key from URL parameter or null if not found\n     * @example\n     * // URL: https://experiment-site.com/task.html?key=exp_abc123&participant=P001\n     * // Returns: \"exp_abc123\"\n     *\n     * // URL: https://experiment-site.com/task.html#key=exp_def456\n     * // Returns: \"exp_def456\"\n     */\n    _getApiKeyFromUrl() {\n        // In Node.js test environment, check global references\n        const windowObj = typeof window !== 'undefined' ? window : global.window;\n        const URLSearchParamsClass =\n            typeof URLSearchParams !== 'undefined' ? URLSearchParams : global.URLSearchParams;\n\n        // Check if we're in a browser environment\n        if (!windowObj || !URLSearchParamsClass) {\n            return null; // Not in browser environment\n        }\n\n        try {\n            // Check query parameters (?key=...)\n            const urlParams = new URLSearchParamsClass(windowObj.location.search);\n            const queryKey = urlParams.get('key');\n            if (queryKey) return queryKey;\n\n            // Check hash parameters (#key=...)\n            const hashParams = new URLSearchParamsClass(windowObj.location.hash.substring(1));\n            const hashKey = hashParams.get('key');\n            if (hashKey) return hashKey;\n\n            return null;\n        } catch (error) {\n            console.warn('Failed to extract API key from URL:', error.message);\n            return null;\n        }\n    }\n\n    /**\n     * Get environment variable (Node.js only for security)\n     * @private\n     * @param {string} name - Environment variable name\n     * @returns {string|undefined} Environment variable value\n     */\n    _getEnvVar(name) {\n        // Node.js environment only\n        if (typeof process !== 'undefined' && process.env) {\n            return process.env[name];\n        }\n\n        // Browser environment: require explicit apiKey parameter\n        // Environment variables in browser bundles are always public\n        return undefined;\n    }\n}\n\n// Export error classes for external use\nexport {\n    WaveClientError,\n    ValidationError,\n    AuthenticationError,\n    AuthorizationError,\n    NotFoundError,\n    RateLimitError,\n    ServerError,\n};\n"],"names":["g","f","exports","module","define","amd","globalThis","self","WaveClient","this","WaveClientError","Error","constructor","message","statusCode","detail","retryAfter","undefined","super","name","ValidationError","AuthenticationError","AuthorizationError","NotFoundError","RateLimitError","ServerError","createErrorFromResponse","response","errorData","status","statusText","retryAfterHeader","seconds","parseInt","isNaN","date","Date","getTime","Math","max","now","parseRetryAfter","headers","get","default","options","apiKey","_getApiKeyFromUrl","baseUrl","_getEnvVar","timeout","maxRetries","retries","baseDelay","maxDelay","clientVersion","replace","logExperimentData","experimentId","participantId","data","Array","isArray","requestBody","participant_id","url","_makeRequest","getHealth","getVersion","setBaseUrl","method","body","attempt","fullUrl","requestOptions","Authorization","AbortSignal","signal","AbortController","controller","setTimeout","abort","JSON","stringify","fetch","ok","json","error","_shouldRetry","delay","_calculateDelay","console","warn","_sleep","timeoutError","networkError","min","exponentialDelay","pow","jitter","random","ms","Promise","resolve","windowObj","window","global","URLSearchParamsClass","URLSearchParams","queryKey","location","search","hashKey","hash","substring","process","env","Object","defineProperty","value"],"mappings":"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"}